#!/usr/bin/env bash
set -e

##
# @file release
# Perform a release for the current project.
#
# A release primarily consists creating a git tag for the released version
# and tracking the resulting versions in a build properties file passed as an argument.
#
# @author Brightcove
# @copyright Apache License, Version 2.0
# @version 1.1.0
# source_repository https://github.com/brightcove/buildsrc
#
# @param $1 The path to the properties file where the version is stored. .
##

#-------------------------------------------------------------------------------
# Copyright 2018 Brightcove
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#-------------------------------------------------------------------------------

##
# This script depends on several environment variables being provided.
# Each of these is declared and documented between this comment
# block and the first function declaration.
##

##
# The properties file which contains the version to release.
#
# This file should contain a line similar to:
# VERSION=1.0.0-SNAPSHOT
##
declare -r prop_file=$1

##
# The current version according to prop_file.
#
# This will normally be provided by sourcing/including PROP_FILE.
##
declare VERSION

##
# The git executable to call. If not already set will look on the path.
##
declare GIT

##
# (Optional) Where hook scripts are located. Defaults to directory of release script.
#
# Hook scripts allow for plugging in additional functionality to the release flow.
# Currently supported hook is:
#   - release::pre_release_hook
##
declare RELEASE_HOOK_DIR

##
# (Optional) Whether this is a release from a branch.
#
# Branch releases may be less restrictive but also mark themselves more loudly.
##
declare -r BRANCH_RELEASE

##
# Utility function to echo to stderr.
#
# @param $@[in] The arguments to pass through to echo.
##
release::error() {
  echo "$@" >&2
}

##
# Utility function to exit with a failure message.
#
# @param $1[in] - Message to output before exiting.
##
release::die() {
  release::error "$1"
  exit 1
}

##
# Locate and set dependencies or die trying.
##
release::find_deps() {
  if [[ -n "${GIT:=$(which git)}" ]]; then
    readonly GIT
  else
    die "git is required but was not found!"
  fi

  if [[ -z "${RELEASE_HOOK_DIR}" ]]; then
    RELEASE_HOOK_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)"
    readonly RELEASE_HOOK_DIR
  fi
}

##
# Prompt the user for a new version which is then used.
#
# The new version is updated in prop_file and that file is then
# re-sourced to update the running environment.
#
# Globals:
#   prop_file[in]
#   VERSION[out]
#
# @param $1[in] The text prompt to display to the user.
# @param $2[in] The default version to display and use if nothing is entered.
##
release::update_version() {
  local prompt=$1
  local default_version=$2
  local temp_file
  local version_provided
  local new_version

  temp_file="${prop_file}.release"
  [[ -f "${temp_file}" ]] && release::die "${temp_file} file already exists. Remove if stale"

  # Determine new version.
  [[ "${BRANCH_RELEASE}" ]] && prompt="(BRANCH) $prompt"
  read -p "${prompt} [${default_version}]:" version_provided
  new_version=${version_provided:-$default_version}
  [[ "${BRANCH_RELEASE}" ]] && new_version="${new_version}-BRANCH"

  # Update and source prop_file.
  sed "s/^VERSION=.*$/VERSION=${new_version}/" "${prop_file}" > "${temp_file}"
  mv "${temp_file}" "${prop_file}"
  source "${prop_file}"
}

##
# Cut and push post-release version.
#
# The released version should only be associated with code at the
# time of the release to avoid ambiguity,
# so this updates the version immediately after the release.
#
# Globals:
#   VERSION[in]
#   prop_file[in]
#   GIT[in]
##
release::postrelease_version() {
  local -i new_micro
  let new_micro="${VERSION##*.}"+1
  release::update_version "Post-release version" "${VERSION%.*}.${new_micro}-SNAPSHOT"
  ${GIT} add "${prop_file}"
  ${GIT} commit -m "Post release version ${VERSION}"
  ${GIT} push
}

##
# Check whether the current git branch seems to be in-synch with its origin.
#
# This includes verifying that the current branch is master and the revisions
# match between the peers.
#
# Globals:
#   GIT
#
# @return 0 (success) if everything appears to be in sync,
#         1 (failure) if there is a mismatch.
##
release::git_is_synched() {
  local status
  local statuses
  local -i synched

  statuses=$(${GIT} status -sb | awk '/##/ {if ($2 != "master...origin/master") { print "NOT_MASTER" }; s[$3]=1}; {s[$1]=1} END {for (t in s) { print t}}')
  let synched=0

  for status in $statuses; do
    case $status in
      'NOT_MASTER')
        release::error 'Not on master!.'
        let synched=1
        ;;
      'M')
        release::error 'Modified files exist. Commit and push change.'
        let synched=1
        ;;
      '[ahead')
        release::error 'Local git is ahead of origin. Push changes.'
        let synched=1
        ;;
      '[behind')
        release::error 'Local git is behind origin. Pull changes.'
        let synched=1
        ;;
    esac
  done

  return $synched
}

##
# Call all pre_release_hook scripts.
#
# Any script present in the HOOK_DIR matching the pattern
# 'pre_release_' will be executed as:
#    $script "${prop_file}" "${VERSION}" "${BRANCH_RELEASE}"
##
release::pre_release_hook() {
  local script;
  shopt -s nullglob;
  for script in ${RELEASE_HOOK_DIR}/pre_release_*; do
    if [[ -x "$script" ]]; then
      "$script" "${prop_file}" "${VERSION}" "${BRANCH_RELEASE}" || exit $?
    else
      release::error "$script is not executable, skipping."
    fi
  done
  shopt -u nullglob;
}

##
# Perform a release for the application, coordinating relevant bits.
#
# Eveything release related will be done in this script so it's easier to
# treat the actions as atomic and rollback/abort as necessary.
#
# Currently this script is not particularly robust. It should be strengthened as failure
# scenarios are encountered.
#
# Globals:
#    prop_file[in]
#    GIT[in]
#    BIN_DIR[in]
#    VERSION[in,out]
##
release::main() {
  local release_lock

  [[ -f "${prop_file}" ]] || release::die "Build property file ${prop_file} not present".

  release_lock="${prop_file}.releasing"
  [[ -f "${release_lock}" ]] && release::die "${release_lock} already exists. Clean up previous release before continuing"

  # Check to make sure git is fully synched.
  ${GIT} remote update

  [[ -n "${BRANCH_RELEASE}" ]] \
    || release::git_is_synched \
    || release::die 'Out of sync, aborting.'

  touch "${release_lock}"

  # Cut and push released version
  release::update_version "Version to release" "${VERSION%%-*}"

  release::pre_release_hook
  #${GIT} add "CHANGELOG.md"

  ${GIT} add "${prop_file}"
  ${GIT} commit -m "Update to version ${VERSION}"
  ${GIT} tag -a "${VERSION}" -m "Release [${VERSION}]"
  ${GIT} push origin ${VERSION}

  [[ -n "${BRANCH_RELEASE}" ]] || release::postrelease_version

  rm "${release_lock}"
}

release::find_deps
source ${prop_file}
release::main

exit 0

##
# CHANGELOG
#
# 1.1.0
# ------
# - Take prop file as argument, drop proj dir
# - Lint script, update conventions
# - Split out changelog into release
#
# 1.0.0
# -----
# - Initial Release
##
